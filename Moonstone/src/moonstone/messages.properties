# The problem with catching Exception is that if the method you are calling later adds
# a new checked exception to its method signature, the developer's intent is that you
# should handle the specific new exception. If your code just catches Exception (or Throwable),
# you'll never know about the change and the fact that your code is now wrong and might break
# at any point of time in runtime.
EXCEPTION = A bad practice. Exception is the parent class of all checked and unchecked exceptions. \n\
            By catching Exception, you will capture ANY possible exceptions, including unexpected runtime exceptions. \n\
            This can lead to hidden bugs.
EXCEPTION_HEADER = Catching all exceptions may causes hidden bugs

# Throwable is the superclass of all errors and exceptions in Java.
# Error is the superclass of all errors which are not meant to be caught by applications.
# Thus, catching Throwable would essentially mean that Errors such as system exceptions
# (e.g., OutOfMemoryError, StackOverFlowError or InternalError) would also get caught.
# And, the recommended approach is that application should not try and recover from Errors
# such as these. Thus, Throwable and Error classes should not be caught. Only Exception
# and its subclasses should be caught.
ERROR = Warning: Error is the superclass of all system errors which are not meant to be caught by applications. \n\
        Please catch the specific exception(s) if possible, or only handle Error at the top-level of your application. \n\
        This includes dangerous errors like OutOfMemoryError and StackOverflowError.
ERROR_HEADER = Catching all errors may causes hidden bugs

# The recommended approach is that application should not try and recover from Errors such as these.


# Java errors are also subclasses of the Throwable.
# Errors are irreversible conditions that can not be handled by JVM itself. And for some JVM
# implementations, JVM might not actually even invoke your catch clause on an Error.
THROWABLE = Warning: Throwable is the superclass of all errors and exceptions in Java, this means even system exceptions would be caught. \n\
            Please catch the specific exception(s) if possible, or only handle Throwable at the top-level of your application. \n\
            This includes dangerous system errors like OutOfMemoryError and StackOverflowError.
THROWABLE_HEADER = Catching all throwables may causes hidden bugs

THROWS_EXCEPTION = A bad practice. Exception is the parent class of all checked and unchecked exceptions. \n\
            By declaring that this method might throw ANY possible Exception, including unexpected runtime exceptions, \
            callers are deprived of information what faults can actually occur. \n\
            This can lead to hidden bugs.
THROWS_EXCEPTION_HEADER = Declaring to throw any exception is too general
THROWS_THROWABLE = Warning: Throwable is the superclass of all errors and exceptions in Java. \n\
            Please declare the specific exception(s) that might occur if possible.
THROWS_THROWABLE_HEADER = Declaring to throw any throwable is too general

# For RunTimeException (unchecked exceptions) it is said that we should not catch them as they indicate
# application code errors. If we are catching Exception class directly we also catch RuntimeException as
# RuntimeException class inherits from Exception.
RUNTIMEEXCEPTION = Runtime Exceptions indicate code bugs that occur at runtime. Catching these is not advisable because \
                   it will hide bugs in your code. \n\
                   Please catch the specific exception(s) if possible.
RUNTIMEEXCEPTION_HEADER = Catching all runtime exceptions may causes hidden bugs

# Nothing is more worse than empty catch block, because it not just hides the Errors and Exception,
# but also may leave your object in unusable or corrupt state. Empty catch block only make sense,
# if you absolutely sure that Exception is not going to affect object state on any ways, but still its
# better to log any error comes during program execution. This is not a Java best practice, but a most
# common practice, while writing Exception handling code in Java.
EMPTY_CATCH = Warning: An empty catch is just pretending that the exception did not occur. It did. \n\
              Please add code to handle, rethrow, or at least log this exception. \n\
              Leaving it empty will hide that the problem occurred and may leave your running code in an unusable or corrupt state.
EMPTY_CATCH_HEADER = Empty catch statements can lead to hidden bugs

# The second exception will come out of method and the original first exception (correct reason) will be lost forever.
# If the code that you call in a finally block can possibly throw an exception, make sure that you either handle it,
# or log it. Never let it come out of the finally block.
THROW_ERROR = Warning: the Error class is reserved for serious system errors eg. OutOfMemoryError. \n\
              Please throw a precise exception to improve the clarity of this code.
THROW_ERROR_HEADER = Throwing a general error may cause hidden bugs

# It simply defeats the whole purpose of having checked exception. Declare the specific checked
# exceptions that your method can throw. If there are just too many such checked exceptions,
# you should probably wrap them in your own exception and add information to in exception message.
# You can also consider code refactoring also if possible.
THROW_EXCEPTION = Warning: Please throw a precise exception to improve the clarity of this code. \n\
                  By throwing a general exception, callers are deprived of information what faults can actually occur. \n\
                  This can lead to hidden bugs.
THROW_EXCEPTION_HEADER = Throwing a general exception may cause hidden bugs

# Generic exceptions such as Error, RuntimeException, Throwable and Exception should never be thrown
# The primary reason why one should avoid throwing Generic Exceptions, Throwable, Error etc is that doing in
# this way prevents classes from catching the intended exceptions. Thus, a caller cannot examine the exception
# to determine why it was thrown and consequently cannot attempt recovery.  Additionally, catching RuntimeException
# is considered as a bad practice. And, thus, throwing Generic Exceptions/Throwable would lead the developer to
# catch the exception at a later stage which would eventually lead to further code smells.
THROW_RUNTIMEEXCEPTION = Warning: Throwing a Runtime Exception may prevent the catching of the intended exception. \n\
                         Please consider handling the error if possible.
THROW_RUNTIMEEXCEPTION_HEADER = Throwing a general runtime exception may cause hidden bugs

THROW_THROWABLE = Warning: Throwing a Throwable may prevent the catching of the intended exception. \n\
                  Please consider handling the error if possible.
THROW_THROWABLE_HEADER = Throwing a general throwable may cause hidden bugs

DESTRUCTIVE_WRAP = Warning: Throwing an exception from a catch block without passing the original exception as an argument \
                   limits access to the original information. \n\
                   It will destroy the stack trace up to this point, making it difficult to debug the problem.
DESTRUCTIVE_WRAP_HEADER = The original exception is lost

RESOURCE_LEAK = Leaving a resource open wastes resources and can potentially cause faults. \
                Closing the resource as soon as possible is preferable.\n\
                Try-with-resources statements allow to safely use a resource in a block of code. \n\
                The resource will be made available within the try body, then will be automatically closed afterwards.
RESOURCE_LEAK_HEADER = This resource is never closed for some execution paths
